{
  "_args": [
    [
      {
        "raw": "connect-mongodb-session",
        "scope": null,
        "escapedName": "connect-mongodb-session",
        "name": "connect-mongodb-session",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Adeoy3\\IdeaProjects\\eym workup"
    ]
  ],
  "_from": "connect-mongodb-session@latest",
  "_id": "connect-mongodb-session@1.3.0",
  "_inCache": true,
  "_location": "/connect-mongodb-session",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/connect-mongodb-session-1.3.0.tgz_1475858408931_0.9072448357474059"
  },
  "_npmUser": {
    "name": "vkarpov15",
    "email": "val@karpov.io"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "connect-mongodb-session",
    "scope": null,
    "escapedName": "connect-mongodb-session",
    "name": "connect-mongodb-session",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-mongodb-session/-/connect-mongodb-session-1.3.0.tgz",
  "_shasum": "34e4e0b4157fda81b8d42f2a741ac4d7ef4ee4fa",
  "_shrinkwrap": null,
  "_spec": "connect-mongodb-session",
  "_where": "C:\\Users\\Adeoy3\\IdeaProjects\\eym workup",
  "author": {
    "name": "Valeri Karpov",
    "email": "valeri.karpov@mongodb.com"
  },
  "bugs": {
    "url": "https://github.com/mongodb-js/connect-mongodb-session/issues"
  },
  "dependencies": {
    "mongodb": "~2.2.0"
  },
  "description": "MongoDB session store for connect/express built by MongoDB",
  "devDependencies": {
    "acquit": "0.1.0",
    "cookie": "0.1.2",
    "express": "4.10.4",
    "express-session": "1.9.2",
    "gulp": "3.8.10",
    "gulp-jscs": "1.4.0",
    "gulp-mocha": "2.0.0",
    "istanbul": "0.3.2",
    "jscs": "1.9.0",
    "mocha": "2.2.5",
    "request": "2.48.0",
    "strawman": "0.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "34e4e0b4157fda81b8d42f2a741ac4d7ef4ee4fa",
    "tarball": "https://registry.npmjs.org/connect-mongodb-session/-/connect-mongodb-session-1.3.0.tgz"
  },
  "engines": "node >= 0.10.0",
  "gitHead": "f48eeee491e0be41f86766888b31e92099f1a92e",
  "homepage": "https://github.com/mongodb-js/connect-mongodb-session#readme",
  "jscsConfig": {
    "preset": "airbnb",
    "requireMultipleVarDecl": null,
    "disallowMultipleVarDecl": true
  },
  "keywords": [
    "connect",
    "mongo",
    "mongodb",
    "session",
    "express"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "vkarpov15",
      "email": "valkar207@gmail.com"
    }
  ],
  "name": "connect-mongodb-session",
  "optionalDependencies": {},
  "readme": "# connect-mongodb-session\n\n[MongoDB](http://mongodb.com)-backed session storage for [connect](https://www.npmjs.org/package/connect) and [Express](http://www.expressjs.com). Meant to be a well-maintained and fully-featured replacement for modules like [connect-mongo](https://www.npmjs.org/package/connect-mongo)\n\n[![Build Status](https://travis-ci.org/mongodb-js/connect-mongodb-session.svg?branch=master)](https://travis-ci.org/mongodb-js/connect-mongodb-session) [![Coverage Status](https://coveralls.io/repos/mongodb-js/connect-mongodb-session/badge.svg?branch=master)](https://coveralls.io/r/mongodb-js/connect-mongodb-session?branch=master)\n\n# API\n\n## MongoDBStore\n\nThis module exports a single function which takes an instance of connect\n(or Express) and returns a `MongoDBStore` class that can be used to\nstore sessions in MongoDB.\n\n#### It can store sessions for Express 4\n\nIf you pass in an instance of the\n[`express-session` module](http://npmjs.org/package/express-session)\nthe MongoDBStore class will enable you to store your Express sessions\nin MongoDB.\n\nThe MongoDBStore class has 2 required options:\n\n1. `uri`: a [MongoDB connection string](http://docs.mongodb.org/manual/reference/connection-string/)\n2. `collection`: the MongoDB collection to store sessions in\n\n**Note:** You can pass a callback to the `MongoDBStore` constructor,\nbut this is entirely optional. The Express 3.x example demonstrates\nthat you can use the MongoDBStore class in a synchronous-like style: the\nmodule will manage the internal connection state for you.\n\n```javascript\n    \n    var express = require('express');\n    var session = require('express-session');\n    var MongoDBStore = require('connect-mongodb-session')(session);\n\n    var app = express();\n    var store = new MongoDBStore(\n      {\n        uri: 'mongodb://localhost:27017/connect_mongodb_session_test',\n        collection: 'mySessions'\n      });\n\n    // Catch errors\n    store.on('error', function(error) {\n      assert.ifError(error);\n      assert.ok(false);\n    });\n\n    app.use(require('express-session')({\n      secret: 'This is a secret',\n      cookie: {\n        maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n      },\n      store: store,\n      // Boilerplate options, see:\n      // * https://www.npmjs.com/package/express-session#resave\n      // * https://www.npmjs.com/package/express-session#saveuninitialized\n      resave: true,\n      saveUninitialized: true\n    }));\n\n    app.get('/', function(req, res) {\n      res.send('Hello ' + JSON.stringify(req.session));\n    });\n\n    server = app.listen(3000);\n  \n```\n\n**Optional:** To clear all sessions from the store, use `store.clear(callback);`. \nThe callback should be called as `callback(error)`.\n\n#### It can store sessions for latest Express 3.x\n\nIf you're using Express 3.x, you need to pass the Express module itself\nrather than the `express-session` module. Session storage is part of\nthe Express core in 3.x but not in 4.x.\n\n**Note:** This example doesn't pass a callback to the `MongoDBStore`\nconstructor. This module can queue up requests to execute once the\ndatabase is connected. However, the `MongoDBStore` constructor will\nthrow an exception if it can't connect and no callback is passed.\n\n```javascript\n    \n    var express = require('../vendor/express-3.18.1');\n\n    var MongoDBStore = require('connect-mongodb-session')(express);\n\n    var app = express();\n    var store = new MongoDBStore(\n      {\n        uri: 'mongodb://localhost:27017/connect_mongodb_session_test',\n        collection: 'mySessions'\n      });\n\n    app.use(express.session({\n      secret: 'This is a secret',\n      cookie: {\n        maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n      },\n      store: store,\n      // Boilerplate options, see:\n      // * https://www.npmjs.com/package/express-session#resave\n      // * https://www.npmjs.com/package/express-session#saveuninitialized\n      resave: true,\n      saveUninitialized: true\n    }));\n\n    app.get('/', function(req, res) {\n      res.send('Hello ' + JSON.stringify(req.session));\n    });\n\n    server = app.listen(3000);\n  \n```\n\n#### It throws an error when it can't connect to MongoDB\n\nYou should pass a callback to the `MongoDBStore` constructor to catch\nerrors. If you don't pass a callback to the `MongoDBStore` constructor,\n`MongoDBStore` will `throw` if it can't connect.\n\n```javascript\n    \n    var express = require('../vendor/express-3.18.1');\n\n    var MongoDBStore = require('connect-mongodb-session')(express);\n\n    var app = express();\n    var numExpectedSources = 2;\n    var store = new MongoDBStore(\n      {\n        uri: 'mongodb://bad.host:27000/connect_mongodb_session_test?connectTimeoutMS=10',\n        collection: 'mySessions'\n      },\n      function(error) {\n        // Should have gotten an error\n      });\n\n    store.on('error', function(error) {\n      // Also get an error here\n    });\n\n    app.use(express.session({\n      secret: 'This is a secret',\n      cookie: {\n        maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n      },\n      store: store,\n      // Boilerplate options, see:\n      // * https://www.npmjs.com/package/express-session#resave\n      // * https://www.npmjs.com/package/express-session#saveuninitialized\n      resave: true,\n      saveUninitialized: true\n    }));\n\n    app.get('/', function(req, res) {\n      res.send('Hello ' + JSON.stringify(req.session));\n    });\n\n    server = app.listen(3000);\n  \n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mongodb-js/connect-mongodb-session.git"
  },
  "scripts": {
    "test": "env NODE_PATH=../ ./node_modules/mocha/bin/mocha ./test/*.test.js",
    "test-travis": "env NODE_PATH=../ ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/*.test.js",
    "unit-coverage": "env NODE_PATH=../ ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/unit.test.js"
  },
  "version": "1.3.0"
}
